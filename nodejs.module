<?php

/**
 * Kick a user off the node.js server.
 *
 * @param mixed $uid 
 */
function nodejs_kick_user($uid) {
  $config = nodejs_get_config();
  $url = 'http://' . $config['host'] . ':' . $config['port'] . "/nodejs/user/kick/$uid";
  $response = drupal_http_request($url);
}

/**
 * Broadcast a message to all clients.
 * 
 * @param string $subject
 * @param string $body
 */
function nodejs_broadcast_message($subject, $body) {
  $message = (object) array(
    'broadcast' => TRUE,
    'data' => (object) array(
      'subject' => $subject,
      'body' => $body,
    ),
    'channel' => 'nodejs_notify',
  );
  nodejs_enqueue_message($message);
}

/**
 * Send a message to given user.
 * 
 * @param int $uid
 * @param string $subject
 * @param string $body
 */
function nodejs_send_user_message($uid, $subject, $body) {
  $message = (object) array(
    'broadcast' => FALSE,
    'data' => (object) array(
      'subject' => $subject,
      'body' => $body,
    ),
    'channel' => 'user_' . $uid,
    'callback' => 'nodejsNotify',
  );
}

/**
 * Implements hook_theme().
 */
function nodejs_theme($existing, $type, $theme, $path) {
  return array(
    'nodejs_stats_page' => array(
      'variables' => array('stats' => new StdClass()),
    ),
  );
}

/**
 * Implements hook_init().
 */
function nodejs_init() {
  $_SESSION['nodejs'] = 'lazy sessions are lazy';
  register_shutdown_function(array('Nodejs', 'sendMessages'));
  $nodejs_config = nodejs_get_config();
  drupal_add_js(drupal_get_path('module', 'nodejs') . '/socket_io/support/socket.io-client/socket.io.js', array('type' => 'file'));
  drupal_add_js(drupal_get_path('module', 'nodejs') . '/nodejs.js', array('type' => 'file'));
  drupal_add_js(array('nodejs' => $nodejs_config), array('type' => 'setting'));
  foreach (nodejs_get_js_handlers() as $handler_file) {
    drupal_add_js($handler_file, array('type' => 'file'));
  }
}

/**
 * Get a list of javascript handler files.
 */
function nodejs_get_js_handlers() {
  $handlers = module_invoke_all('nodejs_handlers_info');
  drupal_alter('nodejs_js_handlers', $handlers);
  return $handlers;
}

/**
 * Implements hook_menu().
 */
function nodejs_menu() {
  return array(
    'nodejs/auth/%' => array(
      'title' => 'Who goes there?',
      'page callback' => 'nodejs_auth_check',
      'page arguments' => array(2),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
    'nodejs/stats' => array(
      'title' => 'Node.js server stats',
      'page callback' => 'nodejs_server_stats_page',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
    'nodejs/stats/users' => array(
      'title' => 'Node.js users stats',
      'page callback' => 'nodejs_users_stats_page',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
    'nodejs/stats/user/%user' => array(
      'title' => 'Node.js user stats',
      'page callback' => 'nodejs_user_stats_page',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
    'nodejs/stats/channel/%channel' => array(
      'title' => 'Node.js channel stats',
      'page callback' => 'nodejs_channel_stats_page',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
  );
}

/**
 * Menu callback: renders overall users stats from the Node.js server.
 */
function nodejs_users_stats_page() {
  $page = array(
    '#type' => 'page',
    'content' => array(
      'nodejs' => array(
        '#markup' => __FUNCTION__,
      ),
    ),
  );
  return $page;
}

/**
 * Menu callback: renders stats for the given user from the Node.js server.
 */
function nodejs_user_stats_page($user) {
  $page = array(
    '#type' => 'page',
    'content' => array(
      'nodejs' => array(
        '#markup' => __FUNCTION__,
      ),
    ),
  );
  return $page;
}

/**
 * Menu callback: renders stats for the given channel from the Node.js server.
 */
function nodejs_channel_stats_page($channel) {
  $page = array(
    '#type' => 'page',
    'content' => array(
      'nodejs' => array(
        '#markup' => __FUNCTION__,
      ),
    ),
  );
  return $page;
}

/**
 * Enqueue a message for sending at the end of the request.
 * 
 * @param StdClass $message 
 */
function nodejs_enqueue_message(StdClass $message) {
  drupal_alter('nodejs_message', $message);
  Nodejs::enqueueMessage($message);
}

/**
 * Send a message immediately.
 * 
 * @param StdClass $message 
 */
function nodejs_send_message(StdClass $message) {
  drupal_alter('nodejs_message', $message);
  return Nodejs::sendMessage($message);
}

/**
 * Menu callback: renders overall stats for the Node.js server.
 */
function nodejs_server_stats_page() {
  $page = array(
    '#type' => 'page',
    'content' => array(
      'nodejs' => array(
        '#markup' => theme('nodejs_stats_page', array('stats' => nodejs_get_server_stats())),
      ),
    ),
  );
  return $page;
}

/**
 * Override or insert variables into the page template.
 */
function nodejs_preprocess_page(&$variables) {
  if (variable_get('nodejs_debug', FALSE)) {
    $variables['page']['content']['nodejs_debug'] = array('#markup' => '<div id="nodejs-debug-wrapper"><h3>Node js debug</h3></div>');
  }
}

/**
 * Menu callback: checks the given key to see if it matches a valid session.
 */
function nodejs_auth_check($auth_key) {
  $uid = db_query("SELECT uid FROM {sessions} WHERE sid = :sid", array(':sid' => $auth_key))->fetchField();
  $auth_user = $uid > 0 ? user_load($uid) : drupal_anonymous_user();
  $auth_user->nodejs_valid_auth_key = $uid !== FALSE;
  $auth_user->channels = (variable_get('nodejs_enable_userchannel', TRUE)) ? array('user_' . $user->uid) : array();
  foreach (module_invoke_all('nodejs_channels_info') as $channel) {
    $auth_user->channels[] = $channel;
  }

  drupal_json_output($auth_user);
  drupal_exit();
}

/**
 * Get nodejs server config.
 */
function nodejs_get_config() {
  global $user;

  static $nodejs_config;

  $channels = (variable_get('nodejs_enable_userchannel', TRUE)) ? array('user_' . $user->uid) : array();
  foreach (module_invoke_all('nodejs_channels_info') as $channel) {
    $channels[] = $channel;
  }
  drupal_alter('nodejs_js_channels', $channels);

  if ($nodejs_config === NULL) {
    $defaults = array(
      'host' => 'localhost',
      'port' => 8080,
      'resource' => '/node.js/realtime',
      'authkey' => session_id(),
      'uid' => $user->uid,
      'channels' => $channels,
    );
    $nodejs_config = variable_get('nodejs_config', array()) + $defaults;
  }
  return $nodejs_config;
}

/**
 * Theme the server stats page
 * 
 * @param StdClass $stats 
 * @return string
 */
function theme_nodejs_stats_page(array $variables) {
  $stats = $variables['stats'];
  if (empty($stats)) {
    return "Error reading Node.js server stats.";
  }
  else {
    $html = '<div class="nodejs-server-stats">';
    $html .= '<h3>Authenticated clients</h3>';
    if (count($stats->authenticatedClients)) {
      $html .= '<ul>';
      foreach ($stats->authenticatedClients as $client) {
        $html .= '<li>' . $client->uid . '</li>';
      }
      $html .= '</ul>';
    }
    else {
      $html .= '<p>There are no authenticated clients</p>';
    }
    $html .= '<h3>Channels</h3>';
    $html .= '</div>';
    return $html;
  }
}

/**
 * Get the stats from the node.js server.
 * 
 * @return StdClass server stats
 */
function nodejs_get_server_stats() {
  $config = nodejs_get_config();
  $url = 'http://' . $config['host'] . ':' . $config['port'] . '/nodejs/stats/server';
  $result = drupal_http_request($url);
  if (isset($result->error)) {
    return (object) array();
  }
  else {
    return (object) json_decode($result->data);
  }
}

class Nodejs {

  public static $messages = array();

  public static function getMessages() {
    return self::$messages;
  }

  public static function enqueueMessage(StdClass $message) {
    self::$messages[] = $message;
  }

  public static function sendMessages() {
    $config = nodejs_get_config();
    foreach (self::$messages as &$message) {
      $message->authkey = session_id();
      drupal_http_request('http://' . $config['host'] . ':' . $config['port'] . '/publish', array('method' => 'POST', 'data' => drupal_json_encode($message)));
    }
  }

  public static function sendMessage(StdClass $message) {
    $config = nodejs_get_config();
    $message->authkey = session_id();
    drupal_http_request('http://' . $config['host'] . ':' . $config['port'] . '/publish', array('method' => 'POST', 'data' => drupal_json_encode($message)));
  }

}

