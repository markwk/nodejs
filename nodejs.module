<?php

/**
 * Implements hook_init().
 */
function nodejs_init() {
  register_shutdown_function(array('Nodejs', 'sendMessages'));
  $nodejs_config = variable_get('nodejs_config', array('authkey' => session_id(), 'host' => $_SERVER['HTTP_HOST'], 'port' => 8080, 'resource' => '/node.js/realtime'));
  drupal_add_js(drupal_get_path('module', 'nodejs') . '/socket_io/support/socket.io-client/socket.io.js', array('type' => 'file'));
  drupal_add_js('sites/all/modules/nodejs/nodejs.js', array('type' => 'file'));
  drupal_add_js(array('nodejs' => $nodejs_config), array('type' => 'setting'));
  foreach (nodejs_get_js_handlers() as $handler_file) {
    drupal_add_js($handler_file, array('type' => 'file'));
  }
}

/**
 * Get a list of javascript handler files.
 */
function nodejs_get_js_handlers() {
  $handlers = array();
  foreach (module_invoke_all('nodejs_handlers_info') as $js_info) {
    $handlers[] = $js_info;
  }
  drupal_alter('nodejs_js_handlers', $handlers);
  return $handlers;
}

/**
 * Implements hook_menu().
 */
function nodejs_menu() {
  return array(
    'nodejs/auth/%' => array(
      'title' => 'Who goes there?',
      'page callback' => 'nodejs_auth_check',
      'page arguments' => array(2),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
    'nodejs/publish' => array(
      'title' => 'oh hai thar',
      'page callback' => 'nodejs_publish_page',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
  );
}

/**
 * Override or insert variables into the page template.
 */
function nodejs_preprocess_page(&$variables) {
  if (variable_get('nodejs_debug', FALSE)) {
    $variables['page']['content']['nodejs'] = array('#markup' => '<strong>Node js debug</strong><div id="nodejs-wrapper"></div>');
  }
}

/**
 * Implements hook_action_info().
 */
function nodejs_action_info() {
  return array(
    'nodejs_user_login_action' => array(
      'type' => 'user',
      'label' => t('Send login notification'),
      'configurable' => FALSE,
      'triggers' => array('user_login'),
    ),
  );
}

function nodejs_user_login_action($account, $form) {
  $account = $account ? $account : $form['user'];
  NodeJs::enqueueMessage('foobar', $account);
}

/**
 * Menu callback: checks the given key to see if it matches a valid session.
 */
function nodejs_auth_check($auth_key) {
  $uid = db_query("SELECT uid FROM {sessions} WHERE sid = :sid", array(':sid' => $auth_key))->fetchField();
  $auth_user = $uid > 0 ? user_load($uid) : drupal_anonymous_user();
  $auth_user->nodejs_valid_auth_key = $uid !== FALSE;

  drupal_json_output($auth_user);
  drupal_exit();
}

/**
 * Get nodejs server config.
 */
function nodejs_get_config() {
  static $nodejs_config;
  if ($nodejs_config === NULL) {
    $defaults = array(
      'authkey' => session_id(),
      'host' => $_SERVER['HTTP_HOST'],
      'port' => 8080,
      'resource' => '/node.js/realtime',
    );
    $nodejs_config = variable_get('nodejs_config', $defaults);
  }
  return $nodejs_config;
}

class Nodejs {

  public static $messages = array();

  public static function getMessages() {
    return self::$messages;
  }

  public static function enqueueMessage($channel, $message) {
    self::$messages[] = (object) array(
      'channel' => $channel,
      'message' => $message,
    );
  }

  public static function sendMessages() {
    foreach (self::$messages as $message) {
      drupal_http_request('http://drupal7.clean:8080/publish', array('method' => 'POST', 'data' => drupal_json_encode($message)));
    }
  }
}

