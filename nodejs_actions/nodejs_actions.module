<?php

/**
 * Implementation of hook_action_info().
 */
 
function nodejs_actions_action_info() {
 /*  return array(
     'node' => array(
       'node_presave' => array(
         'label' => t('When either saving new content or updating existing content'),
       ),
       'node_insert' => array(
         'label' => t('After saving new content'),
       ),
       'node_update' => array(
         'label' => t('After saving updated content'),
       ),
       'node_delete' => array(
         'label' => t('After deleting content'),
       ),
       'node_view' => array(
         'label' => t('When content is viewed by an authenticated user'),
       ),
     ),
     'comment' => array(
       'comment_presave' => array(
         'label' => t('When either saving a new comment or updating an existing comment'),
       ),
       'comment_insert' => array(
         'label' => t('After saving a new comment'),
       ),
       'comment_update' => array(
         'label' => t('After saving an updated comment'),
       ),
       'comment_delete' => array(
         'label' => t('After deleting a comment'),
       ),
       'comment_view' => array(
         'label' => t('When a comment is being viewed by an authenticated user'),
       ),
     ),
     'taxonomy' => array(
       'taxonomy_term_insert' => array(
         'label' => t('After saving a new term to the database'),
       ),
       'taxonomy_term_update' => array(
         'label' => t('After saving an updated term to the database'),
       ),
       'taxonomy_term_delete' => array(
         'label' => t('After deleting a term'),
       ),
     ),
     'system' => array(
       'cron' => array(
         'label' => t('When cron runs'),
       ),
     ),
     'user' => array(
       'user_insert' => array(
         'label' => t('After creating a new user account'),
       ),
       'user_update' => array(
         'label' => t('After updating a user account'),
       ),
       'user_delete' => array(
         'label' => t('After a user has been deleted'),
       ),
       'user_login' => array(
         'label' => t('After a user has logged in'),
       ),
       'user_logout' => array(
         'label' => t('After a user has logged out'),
       ),
       'user_view' => array(
         'label' => t("When a user's profile is being viewed"),
       ),
     ),
   );

*/
  return array(
    'realtime_comment_publish_action' => array(
      'description' => t('Publish realtime notifications Publish comment'),
      'type' => 'comment',
      'configurable' => TRUE,
      'hooks' => array(
        'comment' => array('insert', 'update', 'delete'),
      ),
    ),
    'realtime_comment_unpublish_action' => array(
      'description' => t('Publish realtime notifications Unpublish comment'),
      'type' => 'comment',
      'configurable' => TRUE,
      'hooks' => array(
        'comment' => array('insert', 'update', 'delete'),
      )
    ),
    'realtime_comment_unpublish_by_keyword_action' => array(
      'description' => t('Publish realtime notifications Unpublish comment containing keyword(s)'),
      'type' => 'comment',
      'configurable' => FALSE,
      'hooks' => array(
        'comment' => array('insert', 'update', 'delete'),
      )
    ),
    'realtime_user_login_notification' => array(
      'description' => t('Publish realtime notifications When a User log in'),
      'type' => 'user',
      'configurable' => FALSE,
      'hooks' => array(
        'user' => array('login'),
      )
    ),
    'realtime_user_logout_notification' => array(
      'description' => t('Publish realtime notifications When a User log out'),
      'type' => 'user',
      'configurable' => FALSE,
      'hooks' => array(
        'user' => array('logout'),
      )
    ),    
    /*
    'realtime_node_insert_notification' => array(
      'description' => t('Publish realtime notifications When a node is added'),
      'type' => 'node',
      'configurable' => FALSE,
      'hooks' => array(
        'node' => array('insert'),
      )
    ),
    'realtime_node_update_notification' => array(
      'description' => t('Publish realtime notifications When a node is updated'),
      'type' => 'node',
      'configurable' => FALSE,
      'hooks' => array(
        'node' => array('update'),
      )
    ),
    'realtime_node_delete_notification' => array(
      'description' => t('Publish realtime notifications When a node is deleted'),
      'type' => 'node',
      'configurable' => FALSE,
      'hooks' => array(
        'node' => array('delete'),
      )
    ),*/    
  );
}

/**
 * User login action callback.
 *
 * @param object $user
 */
function realtime_user_login_notification($user) {
    $subject = t('A user %action.', array('%action' => $action));
    $link = l($user->name, 'user/' . $user->uid);
    $body = t('The user !link has logged in.', array('!link' => $link, '%action' => $action));
    nodejs_actions_enqueue_message($subject, $body);
}

/**
 * User logout action callback.
 *
 * @param object $user
 */
function realtime_user_logout_notification($user) {
    $subject = t('A user %action.', array('%action' => $action));
    $link = l($user->name, 'user/' . $user->uid);
    $body = t('The user !link has logged out.', array('!link' => $link, '%action' => $action));
    nodejs_actions_enqueue_message($subject, $body);
}

function realtime_comment_publish_action($comment, $context = array()) {
  if (isset($comment->cid)) {
    $cid = $comment->cid;
    $subject = $comment->subject;
  }
  else {
    $cid = $context['cid'];
    $subject = db_result(db_query("SELECT subject FROM {comments} WHERE cid = %d", $cid));
  }
  db_query('UPDATE {comments} SET status = %d WHERE cid = %d', COMMENT_PUBLISHED, $cid);
  watchdog('action', 'Published comment %subject.', array('%subject' => $subject));
}

/**
 * Implements hook_action_info().
 */
 /*
function nodejs_actions_action_info() {
  $actions = array();

  $triggers = nodejs_actions_trigger_info();

  drupal_alter('trigger_info', $triggers);

  foreach (array('node', 'user', 'comment') as $type) {
    $actions['nodejs_actions_' . $type . '_action'] = array(
      'type' => $type,
      'triggers' => array_keys($triggers[$type]),
      'label' => t('Publish realtime notifications of @type activity.', array('@type' => $type)),
      'configurable' => FALSE,
    );
  }
  return $actions;
}
*/

/**
 * Try to get the action for the given trigger context.
 * 
 * @param mixed $context 
 * @return mixed
 */
function nodejs_actions_get_action($context) {
  $triggers = nodejs_actions_get_triggers();
  if (isset($context['hook'], $triggers[$context['hook']])) {
    return $triggers[$context['hook']];
  }
  return FALSE;
}

/**
 * Returns a list of triggers that we supply an action for.
 * 
 * @return array
 */
function nodejs_actions_get_triggers() {
  return array(
    'comment_insert' => t('inserted'),
    'comment_updated' => t('updated'),
    'node_update' => t('updated'),
    'node_insert' => t('inserted'),
    'user_login' => t('logged in'),
    'user_logout' => t('logged out'),
    'user_insert' => t('was created'),
    'user_updated' => t('was updated'),
  );
}

/**
 * Node object action callback.
 *
 * @param object $node
 * @param array $context
 */
function nodejs_actions_node_action($node, $context = array()) {
  if ($action = nodejs_actions_get_action($context)) {
    $subject = t('Node %action.', array('%action' => $action));
    $link = l($node->title, 'node/' . $node->nid);
    $body = t('The node !link was %action.', array('!link' => $link, '%action' => $action));
    nodejs_actions_enqueue_message($subject, $body);
  }
}

/**
 * Comment object action callback.
 *
 * @param object $node
 * @param array $context
 */
function nodejs_actions_comment_action($comment, $context = array()) {
  if ($action = nodejs_actions_get_action($context)) {
    $subject = t('Comment %action.', array('%action' => $action));
    $link = l($comment->subject, 'node/' . $comment->nid, array('fragment' => 'comment-' . $comment->cid));
    $body = t('The comment !link was %action.', array('!link' => $link, '%action' => $action));
    nodejs_actions_enqueue_message($subject, $body);
  }
}

/**
 * User object action callback.
 *
 * @param object $user
 * @param array $context
 */
function nodejs_actions_user_action($user, $context = array()) {
  if ($action = nodejs_actions_get_action($context)) {
    $subject = t('A user %action.', array('%action' => $action));
    $link = l($user->name, 'user/' . $user->uid);
    $body = t('The user !link %action.', array('!link' => $link, '%action' => $action));
    nodejs_actions_enqueue_message($subject, $body);
  }
}

/**
 * Helper function for enqueueing 'nodejs_notify' channel messages.
 * 
 * @param mixed $subject
 * @param mixed $body
 */
function nodejs_actions_enqueue_message($subject, $body) {
  $message = (object) array(
    'broadcast' => TRUE,
    'data' => (object) array(
      'subject' => $subject,
      'body' => $body,
    ),
    'channel' => 'nodejs_notify',
  );
  nodejs_enqueue_message($message);
}
