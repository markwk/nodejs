<?php
/**
 * Implementation of hook_action_info().
 */
 
function nodejs_actions_action_info() {

  return array(
    'realtime_cron_action' => array(
      'description' => t('Publish realtime notifications when cron is run.'),
      'type' => 'cron',
      'configurable' => FALSE,
    ),  
    'realtime_taxonomy_create_action' => array(
      'description' => t('Publish realtime notifications when a taxonomy term is created.'),
      'type' => 'taxonomy',
      'configurable' => FALSE,
      'hooks' => array(
        'taxonomy' => array('insert'),
      ),
    ),
    'realtime_taxonomy_update_action' => array(
      'description' => t('Publish realtime notifications when a taxonomy term is updated.'),
      'type' => 'taxonomy',
      'configurable' => FALSE,
      'hooks' => array(
        'taxonomy' => array('update'),
      ),
    ),
    'realtime_taxonomy_delete_action' => array(
      'description' => t('Publish realtime notifications when a taxonomy term is deleted.'),
      'type' => 'taxonomy',
      'configurable' => FALSE,
      'hooks' => array(
        'taxonomy' => array('delete'),
      ),
    ),    
    'realtime_comment_create_action' => array(
      'description' => t('Publish realtime notifications when a comment is created.'),
      'type' => 'comment',
      'configurable' => FALSE,
      'hooks' => array(
        'comment' => array('insert'),
      ),
    ),
    'realtime_comment_delete_action' => array(
      'description' => t('Publish realtime notifications when a comment is deleted'),
      'type' => 'comment',
      'configurable' => FALSE,
      'hooks' => array(
        'comment' => array('delete'),
      ),
    ),
    'realtime_comment_update_action' => array(
      'description' => t('Publish realtime notifications when a comment is updated'),
      'type' => 'comment',
      'configurable' => FALSE,
      'hooks' => array(
        'comment' => array('update'),
      ),
    ),
    'realtime_comment_view_action' => array(
      'description' => t('Publish realtime notifications when a comment is viewed'),
      'type' => 'comment',
      'configurable' => FALSE,
      'hooks' => array(
        'comment' => array('view'),
      ),
    ),
    'realtime_comment_validate_action' => array(
      'description' => t('Publish realtime notifications when a comment is validated'),
      'type' => 'comment',
      'configurable' => FALSE,
      'hooks' => array(
        'comment' => array('validate'),
      ),
    ),
    'realtime_comment_publish_action' => array(
      'description' => t('Publish realtime notifications when a comment is published'),
      'type' => 'comment',
      'configurable' => FALSE,
      'hooks' => array(
        'comment' => array('publish'),
      ),
    ),
    'realtime_comment_unpublish_action' => array(
      'description' => t('Publish realtime notifications when a comment is unpublished'),
      'type' => 'comment',
      'configurable' => FALSE,
      'hooks' => array(
        'comment' => array('unpublish'),
      ),
    ),                     
    'realtime_user_login_notification' => array(
      'description' => t('Publish realtime notifications When a User log in'),
      'type' => 'user',
      'configurable' => FALSE,
      'hooks' => array(
        'user' => array('login'),
      )
    ),
    'realtime_user_logout_notification' => array(
      'description' => t('Publish realtime notifications When a User log out'),
      'type' => 'user',
      'configurable' => FALSE,
      'hooks' => array(
        'user' => array('logout'),
      )
    ),
    'realtime_user_insert_notification' => array(
      'description' => t('Publish realtime notifications When a new User account is created.'),
      'type' => 'user',
      'configurable' => FALSE,
      'hooks' => array(
        'user' => array('insert'),
      )
    ), 
    'realtime_user_delete_notification' => array(
      'description' => t('Publish realtime notifications When a User account is deleted.'),
      'type' => 'user',
      'configurable' => FALSE,
      'hooks' => array(
        'user' => array('delete'),
      )
    ),
    'realtime_user_update_notification' => array(
      'description' => t('Publish realtime notifications When a User account is updated.'),
      'type' => 'user',
      'configurable' => FALSE,
      'hooks' => array(
        'user' => array('update'),
      )
    ),
    'realtime_user_view_notification' => array(
      'description' => t('Publish realtime notifications When a User account is viewed.'),
      'type' => 'user',
      'configurable' => FALSE,
      'hooks' => array(
        'user' => array('view'),
      )
    ),      
    'realtime_node_view_notification' => array(
      'description' => t('Publish realtime notifications When a node is viewed by an authenticated user.'),
      'type' => 'node',
      'configurable' => FALSE,
      'hooks' => array(
        'nodeapi' => array('view'),
      )
    ),                  
    'realtime_node_insert_notification' => array(
      'description' => t('Publish realtime notifications When a node is inserted'),
      'type' => 'node',
      'configurable' => FALSE,
      'hooks' => array(
        'nodeapi' => array('insert'),
      )
    ),
    'realtime_node_update_notification' => array(
      'description' => t('Publish realtime notifications When a node is updated'),
      'type' => 'node',
      'configurable' => FALSE,
      'hooks' => array(
        'nodeapi' => array('update'),
      )
    ),
    'realtime_node_delete_notification' => array(
      'description' => t('Publish realtime notifications When a node is deleted'),
      'type' => 'node',
      'configurable' => FALSE,
      'hooks' => array(
        'nodeapi' => array('delete'),
      )
    ),    
  );
}

function realtime_comment_publish_action_submit($form, $form_state) {
  return array('keywords' => drupal_explode_tags($form_state['values']['keywords']));
}


function realtime_comment_publish_action_form($context) {
  $form['keywords'] = array(
    '#title' => t('Keywords'), 
    '#type' => 'textarea', 
    '#description' => t('The comment will be unpublished if it contains any of the character sequences above. Use a comma-separated list of character sequences. Example: funny, bungee jumping, "Company, Inc.". Character sequences are case-sensitive.'), 
    '#default_value' => isset($context['keywords']) ? drupal_implode_tags($context['keywords']) : '',
  );
  return $form;
}

function realtime_node_insert_notification($context = array()) {
  $user = $context->name;
  $link = l($context->title, 'node/' . $context->nid);
  $body = t('The user !user have %action a node !link', array('!user' => $user, '%action' => t('saved'), '!link' => $link));
  nodejs_actions_enqueue_message(t('New node created'), $body);
}

function realtime_node_update_notification($context = array()) {
  $user = $context->name;
  $link = l($context->title, 'node/' . $context->nid);
  $body = t('The user !user have %action a node !link', array('!user' => $user, '%action' => t('updated'), '!link' => $link));
  nodejs_actions_enqueue_message(t('Node updated'), $body);
}

function realtime_node_delete_notification($context = array()) {
  $user = $context->name;
  $link = l($context->title, 'node/' . $context->nid);
  $body = t('The user !user have %action a node !link', array('!user' => $user, '%action' => t('deleted'), '!link' => $link));
  nodejs_actions_enqueue_message(t('Node deleted'), $body);
}

function realtime_node_view_notification($context = array()) {
  $user = $context->name;
  $link = l($context->title, 'node/' . $context->nid);
  $body = t('The user !user have %action the node !link', array('!user' => $user, '%action' => t('viewed'), '!link' => $link));
  nodejs_actions_enqueue_message(t('Node viewed'), $body);
}
function realtime_user_logout_notification($comment, $context = array()) {
  if ($context['op'] == 'logout') {
  $user = $context['form_values']['name'];
  $body = t('The user !user have %action.', array('!user' => $user, '%action' => t('logged out')));
  }
  nodejs_actions_enqueue_message(t('A user have logged out'), $body);
}

function realtime_user_login_notification($comment, $context = array()) {
  if ($context['op'] == 'login') {
  $user = $context['form_values']['name'];
  $body = t('The user !user have %action.', array('!user' => $user, '%action' => t('logged in')));
  }
  nodejs_actions_enqueue_message(t('A user have logged in!'), $body);
}

function realtime_user_insert_notification($comment, $context = array()) {
  if ($context['op'] == 'insert') {
  $user = $context['form_values']['name'];
  $link = l($user, 'user/' . $context['form_values']['uid']);
  $body = t('The new user !link account have been %action.', array('!link' => $link, '%action' => t('created')));
  }
  nodejs_actions_enqueue_message(t('New user account!'), $body);
}

function realtime_user_delete_notification($comment, $context = array()) {
  if ($context['op'] == 'delete') {
  $user = $context['form_values']['name'];
  $link = l($user, 'user/' . $context['form_values']['uid']);
  $body = t('The user !link account have been %action.', array('!link' => $link, '%action' => t('deleted')));
  }
  nodejs_actions_enqueue_message(t('User account deleted!'), $body);
}

function realtime_user_update_notification($comment, $context = array()) {
  $user = $context['form_values']['name'];
  $link = l($user, 'user/' . $context['form_values']['uid']);
  $body = t('The user !link account have been %action.', array('!link' => $link, '%action' => t('updated')));
  nodejs_actions_enqueue_message(t('User account updated!'), $body);
}

function realtime_user_view_notification($comment, $context = array()) {
  $user = user_load(arg(1));
  $user = $user->name;
  $link = l($user, 'user/' . $user->uid);  
  $body = t('This user !link account is being %action.', array('!link' => $link, '%action' => t('viewed')));
  nodejs_actions_enqueue_message(t('User account viewed!'), $body);
}

function realtime_taxonomy_create_action($comment, $context = array()) {
  $term = taxonomy_get_term(arg(3));
  $name = $term->name;
  $voc = taxonomy_vocabulary_load($term->vid);
  $vocabulary = $voc->name;
  $link = l($name, 'taxonomy/term/' . $term->tid);  
  $body = t('This term !link in the vocabulary !voca has been %action.', array('!link' => $link, '!voca' => $vocabulary, '%action' => t('created')));
  nodejs_actions_enqueue_message(t('Taxonomy term added!'), $body);
}

function realtime_taxonomy_update_action($comment, $context = array()) {
  $term = taxonomy_get_term(arg(3));
  $name = $term->name;
  $voc = taxonomy_vocabulary_load($term->vid);
  $vocabulary = $voc->name;
  $link = l($name, 'taxonomy/term/' . $term->tid);  
  $body = t('This term !link in the vocabulary !voca has been %action.', array('!link' => $link, '!voca' => $vocabulary, '%action' => t('created')));
  nodejs_actions_enqueue_message(t('Taxonomy term updated!'), $body);
}

function realtime_taxonomy_delete_action($comment, $context = array()) {
  $term = taxonomy_get_term(arg(3));
  $name = $term->name;
  $voc = taxonomy_vocabulary_load($term->vid);
  $vocabulary = $voc->name;
  $link = l($name, 'taxonomy/term/' . $term->tid);  
  $body = t('This term !link in the vocabulary !voca has been %action.', array('!link' => $link, '!voca' => $vocabulary, '%action' => t('created')));
  nodejs_actions_enqueue_message(t('Taxonomy term deleted!'), $body);
}

function realtime_cron_action($comment, $context = array()) {
  $body = t('The cron has run.');
  nodejs_actions_enqueue_message(t('System'), $body);
}

function realtime_comment_unpublish_action($comment, $context = array()) {

  if (isset($comment->cid)) {
    $cid = $comment->cid;
    $subject = $comment->subject;
	$action = t('unpublished');		
  }
  else {
    $cid = $context['cid'];
    $subject = db_result(db_query("SELECT subject FROM {comments} WHERE cid = %d", $cid));
  }
  $link = l($comment->subject, 'node/' . $comment->nid, array('fragment' => 'comment-' . $comment->cid));
  $body = t('The comment !link was %action.', array('!link' => $link, '%action' => $action));

  nodejs_actions_enqueue_message($subject, $body);
}

function realtime_comment_publish_action($comment, $context = array()) {

  if (isset($comment->cid)) {
    $cid = $comment->cid;
    $subject = $comment->subject;
	$action = t('published');
  }
  else {
    $cid = $context['cid'];
    $subject = db_result(db_query("SELECT subject FROM {comments} WHERE cid = %d", $cid));
  }
  $link = l($comment->subject, 'node/' . $comment->nid, array('fragment' => 'comment-' . $comment->cid));
  $body = t('The comment !link was %action.', array('!link' => $link, '%action' => $action));

  nodejs_actions_enqueue_message($subject, $body);
}

function realtime_comment_view_action($comment, $context = array()) {

  if (isset($comment->cid)) {
    $cid = $comment->cid;
    $subject = $comment->subject;
	$action = t('viewed');
  }
  else {
    $cid = $context['cid'];
    $subject = db_result(db_query("SELECT subject FROM {comments} WHERE cid = %d", $cid));
  }
  $link = l($comment->subject, 'node/' . $comment->nid, array('fragment' => 'comment-' . $comment->cid));
  $body = t('The comment !link was %action.', array('!link' => $link, '%action' => $action));

  nodejs_actions_enqueue_message($subject, $body);
}

function realtime_comment_validate_action($comment, $context = array()) {

  if (isset($comment->cid)) {
    $cid = $comment->cid;
    $subject = $comment->subject;
	$action = t('validated');		
  }
  else {
    $cid = $context['cid'];
    $subject = db_result(db_query("SELECT subject FROM {comments} WHERE cid = %d", $cid));
  }
  $link = l($comment->subject, 'node/' . $comment->nid, array('fragment' => 'comment-' . $comment->cid));
  $body = t('The comment !link is being %action.', array('!link' => $link, '%action' => $action));

  nodejs_actions_enqueue_message($subject, $body);
}

function realtime_comment_create_action($comment, $context = array()) {

  if (isset($comment->cid)) {
    $cid = $comment->cid;
    $subject = $comment->subject;
	$action = t('inserted');	
  }
  else {
    $cid = $context['cid'];
    $subject = db_result(db_query("SELECT subject FROM {comments} WHERE cid = %d", $cid));
  }
  $link = l($comment->subject, 'node/' . $comment->nid, array('fragment' => 'comment-' . $comment->cid));
  $body = t('The comment !link was %action.', array('!link' => $link, '%action' => $action));

  nodejs_actions_enqueue_message($subject, $body);
}

function realtime_comment_update_action($comment, $context = array()) {

  if (isset($comment->cid)) {
    $cid = $comment->cid;
    $subject = $comment->subject;
	$action = t('updated');			
  }
  else {
    $cid = $context['cid'];
    $subject = db_result(db_query("SELECT subject FROM {comments} WHERE cid = %d", $cid));
  }
  $link = l($comment->subject, 'node/' . $comment->nid, array('fragment' => 'comment-' . $comment->cid));
  $body = t('The comment !link was %action.', array('!link' => $link, '%action' => $action));

  nodejs_actions_enqueue_message($subject, $body);
}

function realtime_comment_delete_action($comment, $context = array()) {

  if (isset($comment->cid)) {
    $cid = $comment->cid;
    $subject = $comment->subject;
	$action = t('deleted');		
  }
  else {
    $cid = $context['cid'];
    $subject = db_result(db_query("SELECT subject FROM {comments} WHERE cid = %d", $cid));
  }
  $link = l($comment->subject, 'node/' . $comment->nid, array('fragment' => 'comment-' . $comment->cid));
  $body = t('The comment !link was %action.', array('!link' => $link, '%action' => $action));

  nodejs_actions_enqueue_message($subject, $body);
}

/**
 * Try to get the action for the given trigger context.
 *
 * @param mixed $context
 * @return mixed
 */
 /*
function nodejs_actions_get_action($context) {
  $triggers = nodejs_actions_get_triggers();
  if (isset($context['hook'], $triggers[$context['hook']])) {
    return $triggers[$context['hook']];
  }
  return FALSE;
}*/

/**
 * Returns a list of triggers that we supply an action for.
 *
 * @return array
 */
 /*
function nodejs_actions_get_triggers() {
  return array(
    'comment_insert' => t('inserted'),
    'comment_updated' => t('updated'),
    'node_update' => t('updated'),
    'node_insert' => t('inserted'),
    'user_login' => t('logged in'),
    'user_logout' => t('logged out'),
    'user_insert' => t('was created'),
    'user_updated' => t('was updated'),
  );
}*/

/**
 * Node object action callback.
 *
 * @param object $node
 * @param array $context
 */
 /*
function nodejs_actions_node_action($node, $context = array()) {
  if ($action = nodejs_actions_get_action($context)) {
    $subject = t('Node %action.', array('%action' => $action));
    $link = l($node->title, 'node/' . $node->nid);
    $body = t('The node !link was %action.', array('!link' => $link, '%action' => $action));
    nodejs_actions_enqueue_message($subject, $body);
  }
}*/

/**
 * Comment object action callback.
 *
 * @param object $node
 * @param array $context
 */
 /*
function nodejs_actions_comment_action($comment, $context = array()) {
  if ($action = nodejs_actions_get_action($context)) {
    $subject = t('Comment %action.', array('%action' => $action));
    $link = l($comment->subject, 'node/' . $comment->nid, array('fragment' => 'comment-' . $comment->cid));
    $body = t('The comment !link was %action.', array('!link' => $link, '%action' => $action));
    nodejs_actions_enqueue_message($subject, $body);
  }
}*/

/**
 * User object action callback.
 *
 * @param object $user
 * @param array $context
 */
 /*
function nodejs_actions_user_action($user, $context = array()) {
  if ($action = nodejs_actions_get_action($context)) {
    $subject = t('A user %action.', array('%action' => $action));
    $link = l($user->name, 'user/' . $user->uid);
    $body = t('The user !link %action.', array('!link' => $link, '%action' => $action));
    nodejs_actions_enqueue_message($subject, $body);
  }
}*/

/**
 * Helper function for enqueueing 'nodejs_notify' channel messages.
 *
 * @param mixed $subject
 * @param mixed $body
 */
 
function nodejs_actions_enqueue_message($subject, $body) {
  $message = (object) array(
    'broadcast' => TRUE,
    'data' => (object) array(
      'subject' => $subject,
      'body' => $body,
    ),
    'channel' => 'nodejs_notify',
  );

  nodejs_enqueue_message($message);
}

