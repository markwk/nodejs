<?php

/**
 * Implements hook_init().
 */
function nodejs_buddylist_init() {
  global $user;
}

/**
 * Implements hook_nodejs_user_presence_list().
 */
function nodejs_buddylist_nodejs_user_presence_list($account) {
  return nodejs_buddylist_user_list($account);
}

/**
 * Get a list of buddies for the given account.
 *
 * @param $account
 * @return array
 */
function nodejs_buddylist_user_list($account) {
  $uids = array_keys(flag_friend_get_friends($account->uid));
}

/**
 * Implements hook_permission().
 */
function nodejs_buddylist_permission() {
  return array(
    'use nodejs_buddylist' => array(
      'title' => t('Use Node.js Buddylist'), 
      'description' => t('Allows users to use node.js buddylist.'),
    ),
    'administer nodejs_buddylist settings' => array(
      'title' => t('Administer Node.js Buddylist'), 
      'description' => t('Allow user to administrate node.js buddylist.'),
    ),
  );
}

/**
 * Nodejs Buddy list settings form.
 */
function nodejs_buddylist_settings_form() {
  $form['nodejs_buddylist_maxbuddies'] = array(
    '#type' => 'textfield',
    '#title' => t('Max buddies'),
    '#default_value' => variable_get('nodejs_buddylist_maxbuddies',0),
    '#size' => 3,
    '#description' => t('The max number of buddies a user can have. 0 is unlimited.'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

/**
 * Nodejs Buddy list settings form submit.
 */
function nodejs_buddylist_settings_form_submit($form, &$form_state) {
  variable_set('nodejs_buddylist_maxbuddies', $form_state['values']['nodejs_buddylist_maxbuddies']);
  drupal_set_message(t('Max buddies set.'));
}

/**
 * Implementation of hook_block_info.
 */
function nodejs_buddylist_block_info() {
  $blocks = array();
  
  $blocks['nodejs_buddylist_all'] = array(
    'info' => 'Nodejs Buddylist admin view all users',
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['nodejs_buddylist_perchan'] = array(
    'info' => 'Nodejs Buddylist show users for a specified channel',
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['nodejs_buddylist_buddylist'] = array(
    'info' => 'Nodejs Buddylist a specific users buddylist.',
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implementation of hook_block_view().
 */
function nodejs_buddylist_block_view($delta = '') {
  global $user;

  $block = array();
 
  switch($delta) {
    case 'nodejs_buddylist_buddylist':
      $block['subject'] = t('Your Buddylist');
      $buddies = nodejs_buddylist_user_list($user);
      $block['content'] = 'Content for users buddylist';
    break;

    default:
    break;
  }
  return $block;
}

