<?php

/**
 * Implements hook_init().
 */
function nodejs_buddylist_init() {
  drupal_add_css(drupal_get_path('module', 'nodejs_buddylist') . '/nodejs_buddylist.css');
  drupal_add_js(drupal_get_path('module', 'nodejs_buddylist') . '/nodejs_buddylist.js');
}

/**
 * Implements hook_nodejs_user_presence_list().
 */
function nodejs_buddylist_nodejs_user_presence_list($account) {
  return array_keys(nodejs_buddylist_user_list($account));
}

/**
 * Get a list of buddies for the given account.
 *
 * @param $account
 * @return array
 */
function nodejs_buddylist_user_list($account) {
  return flag_friend_get_friends($account->uid);
}

/**
 * Implements hook_permission().
 */
function nodejs_buddylist_permission() {
  return array(
    'use nodejs_buddylist' => array(
      'title' => t('Use Node.js Buddylist'), 
      'description' => t('Allows users to use node.js buddylist.'),
    ),
  );
}

/**
 * Implementation of hook_block_info.
 */
function nodejs_buddylist_block_info() {
  return array(
    'nodejs_buddylist_buddylist' => array(
      'info' => 'Node.js Buddylist a specific users buddylist.',
      'cache' => DRUPAL_NO_CACHE,
    ),
  );
}

/**
 * Implementation of hook_block_view().
 */
function nodejs_buddylist_block_view($delta = '') {
  global $user;

  $block = array();
  switch($delta) {
    case 'nodejs_buddylist_buddylist':
      $block['subject'] = t('Your Buddylist');
      $block['content'] = nodejs_buddylist_block_content($user);
    break;

    default:
    break;
  }
  return $block;
}

/**
 * Get the content for the buddy list block.
 */
function nodejs_buddylist_block_content($account) {
  $buddies = nodejs_buddylist_user_list($account);
  if ($buddies) {
    $online_uids = nodejs_buddylist_get_online_uids(array_keys($buddies));
    $html = '<ul>';
    foreach ($buddies as $buddy) {
      $id = "nodejs-buddylist-uid-$buddy->uid";
      $class = 'nodejs-buddylist-' . (in_array($buddy->uid, $online_uids) ? 'online' : 'offline');
      $html .= '<li id="' . $id . '" class="' . $class . '">' . theme('username', array('account' => $buddy)) . '</li>';
    }
    $html .= '</ul>';
    return $html;
  }
  else {
    return t("You have no buddies.");
  }
}

/**
 * Filter the given list of uids based on who is online.
 */
function nodejs_buddylist_get_online_uids($uids) {
  return db_select('nodejs_presence', 'njp')
    ->condition('njp.uid', $uids, 'IN')
    ->fields('njp', array('uid'))
    ->execute()
    ->fetchCol();
}

