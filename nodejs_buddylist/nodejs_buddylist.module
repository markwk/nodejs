<?php

/**
 * Implements hook_init().
 */
function nodejs_buddylist_init() {
  drupal_add_js(array('nodejs_buddylist' => array('max_buddies' => variable_get('nodejs_buddylist_max_buddies', 0))), 'setting');
}

/**
 * Implements hook_menu().
 */
function nodejs_buddylist_menu() {
  return array(
    'admin/config/nodejs/nodejs_buddylist' => array(
      'title' => 'Node.js Buddylist Settings',
      'description' => 'Settings for node.js buddylist.',
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('access administration pages'),
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
      'position' => 'left',
      'weight' => 1,
    ),
    'admin/config/nodejs/nodejs_buddylist/settings' => array(
      'title' => 'Node.js Buddylist Settings',
      'description' => 'Settings for node.js buddylist.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('nodejs_buddylist_settings_form'),
      'access arguments' => array('administer nodejs_buddylist settings'),
    ),   
  );
}

/**
 * Implements hook_nodejs_user_presence_list().
 */
function nodejs_buddlylist_nodejs_user_presence_list($account) {
  $sql = 'SELECT uid1, uid2 
          FROM {nodejs_buddylist} 
          WHERE (uid1 = :uid OR uid2 = :uid)
          AND authorised = 1';
  $params = array(':uid1' => $account->uid, ':uid2' => $account->uid);
  $presence_list = array();
  if ($buddies = db_query($sql, $params)->fetchAll()) {
    foreach ($buddies as $buddy) {
      $presence_list[] = $buddy->uid1 == $account->uid ? $buddy->uid2 : $buddy->uid1;
    }
  }
  return $presence_list;
}

/**
 * Implements hook_permission().
 */
function nodejs_buddylist_permission() {
  return array(
    'use nodejs_buddylist' => array(
      'title' => t('Use Node.js Buddylist'), 
      'description' => t('Allows users to use node.js buddylist.'),
    ),
    'administer nodejs_buddylist settings' => array(
      'title' => t('Administer Node.js Buddylist'), 
      'description' => t('Allow user to administrate node.js buddylist.'),
    ),
  );
}

/**
 * Nodejs Buddy list settings form.
 */
function nodejs_buddylist_settings_form() {
  $form['nodejs_buddylist_maxbuddies'] = array(
    '#type' => 'textfield',
    '#title' => t('Max buddies'),
    '#default_value' => variable_get('nodejs_buddylist_maxbuddies',0),
    '#size' => 3,
    '#description' => t('The max number of buddies a user can have. 0 is unlimited.'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

/**
 * Nodejs Buddy list settings form submit.
 */
function nodejs_buddylist_settings_form_submit($form, &$form_state) {
  variable_set('nodejs_buddylist_maxbuddies', $form_state['values']['nodejs_buddylist_maxbuddies']);
  drupal_set_message(t('Max buddies set.'));
}

/**
 * Implementation of hook_block_info.
 */
function nodejs_buddylist_block_info() {
  $blocks = array();
  
  $blocks['nodejs_buddylist_all'] = array(
    'info' => 'Nodejs Buddylist admin view all users',
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['nodejs_buddylist_perchan'] = array(
    'info' => 'Nodejs Buddylist show users for a specified channel',
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['nodejs_buddylist_buddylist'] = array(
    'info' => 'Nodejs Buddylist a specific users buddylist.',
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implementation of hook_block_view().
 */
function nodejs_buddylist_block_view($delta = '') {
  $block = array();
 
  switch($delta) {
    case 'nodejs_buddylist_all':
      $block['subject'] = 'All Users';
      $block['content'] = 'Content for all users';
    break;

    case 'nodejs_buddylist_users_for_channel':
      $block['subject'] = 'All Users for a channel';
      $block['content'] = 'Content for all users per channel';
    break;

    case 'nodejs_buddylist_buddylist':
      $block['subject'] = 'Your Buddylist';
      $block['content'] = 'Content for users buddylist';
    break;

    default:
    break;
  }
  return $block;
}

