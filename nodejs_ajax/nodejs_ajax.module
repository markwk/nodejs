<?php

/**
 * Implements hook_init().
 */
function nodejs_ajax_init() {
  nodejs_add_library('system', 'drupal.ajax');
}

/**
 * Implements hook_nodejs_handlers_info().
 */
function nodejs_ajax_nodejs_handlers_info() {
  return array(
    drupal_get_path('module', 'nodejs_ajax') . '/nodejs_ajax.js',
  );
}

/**
 * Implements hook_nodejs_user_channels().
 */
function nodejs_ajax_nodejs_user_channels($account) {
  return array(
    'nodejs_ajax_broadcast',
  );
}

/**
 * Send some commands to the user asynchronously.
 *
 * @param array $commands 
 * @param array $options 
 */
function nodejs_ajax_render($commands = array(), $options = array()) {
  $options += array(
    'channel' => 'nodejs_user_',
    'uid' => NULL,
  );

  if (!is_null($options['uid'])) {
    $channel = $options['channel'] . $options['uid'];
  }

  $message = (object) array(
    'channel' => $channel,
    'commands' => $commands,
  );
  
  if (isset($options['callback'])) {
    $message->callback = $options['callback'];
  }

  return nodejs_send_message($message);
}

/*
 * Clone of the drupal 7 api drupal_add_library function
 */

function nodejs_add_library($module, $name, $every_page = NULL) {
  $added = &nodejs_static(__FUNCTION__, array());

  // Only process the library if it exists and it was not added already.
  if (!isset($added[$module][$name])) {
    if ($library = nodejs_get_library($module, $name)) {
      // Add all components within the library.
      $elements['#attached'] = array(
				     'library' => $library['dependencies'], 
				     'js' => $library['js'], 
				     'css' => $library['css'],
				     );
      $added[$module][$name] = nodejs_process_attached($elements, JS_LIBRARY, TRUE, $every_page);
    }
    else {
      // Requested library does not exist.
      $added[$module][$name] = FALSE;
    }
  }

  return $added[$module][$name];
}


function &nodejs_static($name, $default_value = NULL, $reset = FALSE) {
  static $data = array(), $default = array();
  // First check if dealing with a previously defined static variable.
  if (isset($data[$name]) || array_key_exists($name, $data)) {
    // Non-NULL $name and both $data[$name] and $default[$name] statics exist.
    if ($reset) {
      // Reset pre-existing static variable to its default value.
      $data[$name] = $default[$name];
    }
    return $data[$name];
  }
  // Neither $data[$name] nor $default[$name] static variables exist.
  if (isset($name)) {
    if ($reset) {
      // Reset was called before a default is set and yet a variable must be
      // returned.
      return $data;
    }
    // First call with new non-NULL $name. Initialize a new static variable.
    $default[$name] = $data[$name] = $default_value;
    return $data[$name];
  }
  // Reset all: ($name == NULL). This needs to be done one at a time so that
  // references returned by earlier invocations of drupal_static() also get
  // reset.
  foreach ($default as $name => $value) {
    $data[$name] = $value;
  }
  // As the function returns a reference, the return should always be a
  // variable.
  return $data;
}


/*
 * Clone of the drupal 7 api drupal_get_library function
 */

function nodejs_get_library($module, $name = NULL) {
  $libraries = &nodejs_static(__FUNCTION__, array());

  if (!isset($libraries[$module])) {
    // Retrieve all libraries associated with the module.
    $module_libraries = module_invoke($module, 'library');
    if (empty($module_libraries)) {
      $module_libraries = array();
    }
    // Allow modules to alter the module's registered libraries.
    //TODO change with the drupal 6 one drupal_alter($type, &$data) not drupal_alter($type, &$data, &$context1 = NULL, &$context2 = NULL)
    drupal_alter('library', $module_libraries, $module);

    foreach ($module_libraries as $key => $data) {
      if (is_array($data)) {
        // Add default elements to allow for easier processing.
        $module_libraries[$key] += array(
					 'dependencies' => array(),
					 'js' => array(),
					 'css' => array(),
					 );
        foreach ($module_libraries[$key]['js'] as $file => $options) {
          $module_libraries[$key]['js'][$file]['version'] = $module_libraries[$key]['version'];
        }
      }
    }
    $libraries[$module] = $module_libraries;
  }
  if (isset($name)) {
    if (!isset($libraries[$module][$name])) {
      $libraries[$module][$name] = FALSE;
    }
    return $libraries[$module][$name];
  }
  return $libraries[$module];
}

/*
 * Clone of the drupal 7 api drupal_process_attached function
 */
function nodejs_process_attached($elements, $group = JS_DEFAULT, $dependency_check = FALSE, $every_page = NULL) {
  // Add defaults to the special attached structures that should be processed differently.
  $elements['#attached'] += array(
				  'library' => array(), 
				  'js' => array(), 
				  'css' => array(),
				  );

  // Add the libraries first.
  $success = TRUE;
  foreach ($elements['#attached']['library'] as $library) {
    if (drupal_add_library($library[0], $library[1], $every_page) === FALSE) {
      $success = FALSE;
      // Exit if the dependency is missing.
      if ($dependency_check) {
        return $success;
      }
    }
  }
  unset($elements['#attached']['library']);

  // Add both the JavaScript and the CSS.
  // The parameters for drupal_add_js() and drupal_add_css() require special
  // handling.
  foreach (array('js', 'css') as $type) {
    foreach ($elements['#attached'][$type] as $data => $options) {
      // If the value is not an array, it's a filename and passed as first
      // (and only) argument.
      if (!is_array($options)) {
        $data = $options;
        $options = NULL;
      }
      // In some cases, the first parameter ($data) is an array. Arrays can't be
      // passed as keys in PHP, so we have to get $data from the value array.
      if (is_numeric($data)) {
        $data = $options['data'];
        unset($options['data']);
      }
      // Apply the default group if it isn't explicitly given.
      if (!isset($options['group'])) {
        $options['group'] = $group;
      }
      // Set the every_page flag if one was passed.
      if (isset($every_page)) {
        $options['every_page'] = $every_page;
      }
      call_user_func('drupal_add_' . $type, $data, $options);
    }
    unset($elements['#attached'][$type]);
  }

  // Add additional types of attachments specified in the render() structure.
  // Libraries, JavaScript and CSS have been added already, as they require
  // special handling.
  foreach ($elements['#attached'] as $callback => $options) {
    if (function_exists($callback)) {
      foreach ($elements['#attached'][$callback] as $args) {
        call_user_func_array($callback, $args);
      }
    }
  }

  return $success;
}
